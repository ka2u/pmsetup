#!/usr/bin/env perl

use strict;
use warnings;
use ExtUtils::MakeMaker qw(prompt);
use File::Basename;
use File::Path;
use File::Spec;
use Text::Xslate;
use YAML;
use Getopt::Long;

GetOptions(
    'help' => \my $help,
);
usage() if $help;

sub usage {
    print "Usage: $0 Module\n";
    exit 0;
}

our $VERSION = '0.03';

my $config = { 
    author        => 'Kazuhiro Shibuya',
    email         => 'stevenlabs at gmail dot com',
};

my $modname = shift @ARGV or usage();
   $modname =~ s/-/::/g;

write_plugin_files($modname, $config);

sub write_plugin_files {
    my($module, $config) = @_;

    # $module = "Foo::Bar"
    # $suffix = "Bar"
    # $dist   = "Foo-Bar"
    # $path   = "Foo/Bar.pm"
    my @pkg    = split /::/, $module;
    my $suffix = $pkg[ @pkg - 1 ];
    my $dist   = join "-", @pkg;
    my $path   = join( "/", @pkg ) . ".pm";

    mkdir $dist, 0777;
    chdir $dist;

    my @template = YAML::Load(join '', <DATA>);
    my $vars = {
        module    => $module,
        dist      => $dist,
        path      => $path,
        config    => $config,
        localtime => scalar localtime
    };

    for my $tmpl (@template) {

        my $file = $tmpl->{file};
           $file =~ s/(\$\w+)/$1/eeg;
        write_file($file, $tmpl->{template}, $vars);
        chmod oct($tmpl->{chmod}), $tmpl->{file} if $tmpl->{chmod};
    }

    !system "ln -s lib/$path README.pod" or die $?;

    !system "perl Makefile.PL" or die $?;
    !system 'make test' or die $?;
    !system 'make manifest' or die $?;
    !system 'make distclean' or die $?;

    # initialize git repository
    !system("git init") or die $?;
    !system("git add .") or die $?;
    !system("git commit -m 'Initial import.'") or die $?;
}

sub write_file {
    my($path, $template, $vars) = @_;

    if (-e $path) {
        my $ans = prompt("$path exists. Override? [yN] ", 'n');
        return if $ans !~ /[Yy]/;
    }

    my $dir = File::Basename::dirname($path);
    unless (-e $dir) {
        warn "Creating directory $dir\n";
        File::Path::mkpath($dir, 1, 0777);
    }

    my $tt = Text::Xslate->new(syntax => 'TTerse');
    my $content = $tt->render_string($template, $vars);

    warn "Creating $path\n";
    open my $out, ">", $path or die "$path: $!";
    print $out $content;
    close $out;
}

=pod

original L<http://svn.bulknews.net/repos/public/misc/pmsetup>

=cut

__DATA__
---
file: Makefile.PL
template: |
  use ExtUtils::MakeMaker;

  WriteMakefile(
      NAME         => '[% module %]',
      AUTHOR       => '[% config.author %]',
      VERSION_FROM => 'lib/[% path %]',
      PREREQ_PM    => {
      },
      MIN_PERL_VERSION => '5.008001',
      (-d 'xt' and $ENV{AUTOMATED_TESTING} || $ENV{RELEASE_TESTING}) ? (
          test => {
              TESTS => 't/*.t t/*/*.t t/*/*/*.t t/*/*/*/*.t'
          },
      ) : (),
  );
---
file: t/00_compile.t
template: |
  use strict;
  use Test::More tests => 1;

  BEGIN { use_ok '[% module %]' }
---
file: xt/01_podspell.t
template: |
  use strict;
  use Test::More;
  eval q{ use Test::Spelling };
  plan skip_all => "Test::Spelling is not installed." if $@;
  add_stopwords(map { split /[\s\:\-]/ } <DATA>);
  $ENV{LANG} = 'C';
  my $spell_cmd;
  foreach my $path (split(/:/, $ENV{PATH})) {
      -x "$path/spell"  and $spell_cmd="spell", last;
      -x "$path/ispell" and $spell_cmd="ispell -l", last;
      -x "$path/aspell" and $spell_cmd="aspell list", last;
  }
  plan skip_all => "no spell/ispell/aspell" unless $spell_cmd;
  
  set_spell_cmd($spell_cmd);
  all_pod_files_spelling_ok('lib');
  __DATA__
  [% config.author %]
  [% module %]
  tokuhirom
  AAJKLFJEF
  GMAIL
  COM
  Tatsuhiko
  Miyagawa
  Kazuhiro
  Osawa
  lestrrat
  typester
  cho45
  charsbar
  coji
  clouder
  gunyarakun
  hio_d
  hirose31
  ikebe
  kan
  kazeburo
  daisuke
  maki
  TODO
  API
  URL
  URI
  db
  TTerse
  irc
  org
  CSS
  Amon
---
file: xt/02_perlcritic.t
template: |
  use strict;
  use Test::More;
  eval q{
      use Test::Perl::Critic 1.02 -exclude => [
          'Subroutines::ProhibitSubroutinePrototypes',
          'Subroutines::ProhibitExplicitReturnUndef',
          'TestingAndDebugging::ProhibitNoStrict',
          'ControlStructures::ProhibitMutatingListFunctions',
      ]
  };
  plan skip_all => "Test::Perl::Critic 1.02+ is not installed." if $@;
  all_critic_ok('lib');
---
file: xt/03_pod.t
template: |
  use Test::More;
  eval "use Test::Pod 1.00";
  plan skip_all => "Test::Pod 1.00 required for testing POD" if $@;
  all_pod_files_ok();
---
file: Changes
template: |
  Revision history for Perl extension [% module %]

  0.01    [% localtime %]
          - original version
---
file: lib/$path
template: |
  package [% module %];
  use strict;
  use warnings;
  use 5.008001;
  our $VERSION = '0.01';


  1;
  __END__

  =encoding utf8

  =head1 NAME

  [% module %] -

  =head1 SYNOPSIS

    use [% module %];

  =head1 DESCRIPTION

  [% module %] is

  =head1 AUTHOR

  [% config.author %] E<lt>[% config.email %]E<gt>

  =head1 SEE ALSO

  =head1 LICENSE

  Copyright (C) [% config.author %]

  This library is free software; you can redistribute it and/or modify
  it under the same terms as Perl itself.

  =cut
---
file: MANIFEST.SKIP
template: |
  ^\.git/
  \bRCS\b
  \bCVS\b
  ^MANIFEST\.
  ^Makefile$
  ~$
  ^#
  \.old$
  ^blib/
  ^pm_to_blib
  ^MakeMaker-\d
  \.gz$
  \.cvsignore
  ^t/perlcritic
  ^tools/
  \.svn/
  ^[^/]+\.yaml$
  ^[^/]+\.pl$
  ^\.shipit$
  \.sw[po]$
  ^Build$
  ^ppport.h$
  ^xshelper.h$
  cover_db
  nytprof
  perltidy.ERR$
  ^README.pod$
  ^tags$
---
file: .shipit
chmod: 0644
template: |
  steps = FindVersion, ChangeVersion, CheckChangeLog, DistTest, Commit, Tag, MakeDist, UploadCPAN
  git.push_to=origin
---
file: .gitignore
chmod: 0644
template: |
  Makefile
  inc/
  [% suffix %].c
  ppport.h
  *.sw[po]
  *.bak
  *.old
  Build
  _build/
  xshelper.h
  tags
---
file: README
template: |
  This is Perl module [% module %].
  
  INSTALLATION
  
  [% module %] installation is straightforward. If your CPAN shell is set up,
  you should just be able to do
  
  % cpan [% module %]
  
  Download it, unpack it, then build it as per the usual:
  
  % perl Makefile.PL
  % make && make test
  
  Then install it:
  
  % make install
  
  DOCUMENTATION
  
  [% module %] documentation is available as in POD. So you can do:
  
  % perldoc [% module %]
